FROM nvidia/cuda:9.0-base-ubuntu16.04

ENV HOME /root

WORKDIR ${HOME}

RUN apt-get update && apt-get -y  --no-install-recommends install software-properties-common

RUN apt-get update && apt-get -y --no-install-recommends install \
        ant \
        bzip2 \
        build-essential \
        ca-certificates \
        ccache \
        cmake \
        cuda-command-line-tools-9-0 \
        cuda-cublas-dev-9-0 \
        cuda-cudart-dev-9-0 \
        cuda-cufft-dev-9-0 \
        cuda-curand-dev-9-0 \
        cuda-cusolver-dev-9-0 \
        cuda-cusparse-dev-9-0 \
        curl \
        genromfs \
        git \
        gosu \
        iproute \
        iputils-ping \
        less \
        lcov \
        libcudnn7=7.0.5.15-1+cuda9.0 \
        libcudnn7-dev=7.0.5.15-1+cuda9.0 \
        libeigen3-dev \
        libffi-dev \
        libhdf5-serial-dev \
        libopencv-dev \
        libpng12-dev \
        libssl-dev \
        libzmq3-dev \
        make \
        nano \
        net-tools \
        ninja-build \
        openjdk-8-jdk \
        patch \
        pkg-config \
        protobuf-compiler \
        python-dev \
        python-pip \
        python3-dev \
        python3-empy \
        python3-numpy \
        python3-pip \
        python3-serial \
        python3-software-properties \
        python3-tk \
        rsync \
        s3cmd \
        software-properties-common \
        sudo \
        unzip \
        xsltproc \
        wget \
        zip \
    && apt-get -y autoremove \
    && apt-get clean autoclean \
    # pip3
    && pip3 install setuptools wheel \
    && pip install setuptools wheel \
    && pip3 install 'matplotlib==2.2.2' --force-reinstall \
    # coveralls code coverage reporting
    && pip3 install cpp-coveralls \
    # jinja template generation
    && pip3 install jinja2 \
    # tensorflow dependencies and used libraries
    && pip3 --no-cache-dir install \
        Pillow \
        cython \
        pycocotools \
        h5py \
        keras_applications \
        keras_preprocessing \
        mock \
        numpy \
        opencv-python \
        scipy \
        scikit-image \
        sklearn \
        pandas \
        enum34 \
    # cleanup
    && rm -rf /var/lib/apt/lists/{apt,dpkg,cache,log} /tmp/* /var/tmp/* \
    # Add Fast-RTPS
    && cd /opt && curl -L --noproxy "*" http://www.eprosima.com/index.php/component/ars/repository/eprosima-fast-rtps/eprosima-fast-rtps-1-5-0/eprosima_fastrtps-1-5-0-linux-tar-gz?format=raw -o eProsima_FastRTPS-1.5.0-Linux.tar.gz \
    && tar -xf eProsima_FastRTPS-1.5.0-Linux.tar.gz eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen \
    && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/bin/fastrtpsgen /usr/local/bin/fastrtpsgen \
    && mkdir -p /usr/local/share/fastrtps && ln -s /opt/eProsima_FastRTPS-1.5.0-Linux/share/fastrtps/fastrtpsgen.jar /usr/local/share/fastrtps/fastrtpsgen.jar \
    && find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete \
    && rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a \
    && export PATH=${PATH}:/usr/local/cuda-9.0/bin \
    && export CUDA_HOME=${CUDA_HOME}:/usr/local/cuda:/usr/local/cuda-9.0 \
    && export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda-9.0/lib64 \
    && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64

RUN apt-get update && \
    apt-get install nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0 && \
    apt-get update && \
    apt-get install libnvinfer4=4.1.2-1+cuda9.0 && \
    apt-get install libnvinfer-dev=4.1.2-1+cuda9.0

# Install Tensorflow version 1.5 because my system does not have a new enough
# cpu for newer versions
RUN pip --no-cache-dir install tensorflow-gpu==1.5.0 \
        keras
